Rendu 	https://rendu-svn.etna-alternance.net/v2/2020_Bachelor - Octobre_TIC-TWEB_7_0-3693/HapiVueMongo et Microservices/aljana_s
Correction 	Soutenances
Temps 	2 Runs
Effectif 	Groupes de 2
HapiVueMongo & Microservices

La police de Boston a besoin d’un nouvel outil d’exploration et recensement des crimes. Votre travail est de le créer !

Pour ce faire vous avez à votre disposition un export de la base de données de la police sous format CSV.

Le chef de la police vous demande explicitement de :

    Fournir des outils de visualisation des données (crimes par date, par type, par localisation, ...)
    Forcer l’identification de chaque utilisateur, et leur attribuer des droits différents selon leurs grades. Agent (consultation), Détective (consultation, ajout, et modification), Chef de la police (consultation, ajout, modification et suppression)
    Chaque nouveau compte devra être validé par le Chef de la police.

Technos

    Un front avec VueJS / Vuex / Nuxt
    Une API en HapiJS
    Une base de données Mongo & MySQL
    Lumen (pour vos microservices)

Microservices

Vous devez réaliser 3 microservices à l'aide de Lumen.

    L'Enregistrement des utilisateurs sur une base MySQL
    L'export des utilisateurs sous le format CSV
    La recherche

Exemple : http://127.0.0.1:8080/exportToCsv/ et http://127.0.0.1:5832/searchResult ...

L'idée n'est pas de réaliser toute une architecture microservices, mais simplement de développer 3 microservices qui eux seront consommés par votre projet. Vous devez utiliser Docker pour faire tourner vos microservices.
Fonctionnalités

    Une page de connexion / inscription
    Une page d’administration pour la validation des nouveaux profils (réservée au Chef de la police, vous devez garantir que chacun a les bons droits), vous pouvez utiliser un template CSS pour l'interface admin si vous le souhaitez, (SB admin) par exemple.
    Une page de visualisation des données :
        Visualisation des détails
        Fonctionnalité de filtres (par armes, ...)
        Barre de recherche (microservice)
    Une page de saisie des crimes et délits
    Les utilisateurs doivent être enregistrés dans une base de données MySQL (microservice)
    Export des utilisateurs sous le format CSV (microservice)

Pour l'API

Elle devra être RESTFUL et créée à partir d'Hapi JS.


Appliquer les connaissances en API RESTful
Microservices / dev trois services : Lumen microframework Laravel basé en php
Technologies modernes HapiJS VueJS Mongo Lumen MySQL Docker 
12 octobre : soutenance finale session de code review questions sur le code et les microservices

HapiJS : initialisation d'un server http 
methode, chemin, handler
mettre en place le server
mettre en place la première route
Logger : bonne pratique / coder en js - donner des informations de debug avec un consolelog. logger : il peut être utilisé pour extraire d'autres données ds sortie standard ou dans un fichier de config.
Plugin dans Hapijs : pour mettre en place le logger, il faut utiliser un plugin register dans le serveur
Utiliser de sfichiers de conf : ne pas entrer des infos en dur et le rendre scalable

HapiJS : initialisation d'un server http 
mettre en place le server
mettre en place la première route
LifeCycleRequest pas de middleware / remplacé par les LifeCycleRequest
dans la vie d'une requête, on a des hooks pour provoquer une action 
comprendre l'ordre d'exécution d'une requête : 
comment l'utiliser :

Monolithique / Architecture microservices
Monolithique : trois parties : interface utilisateur, base de données, une application côté serveur
Un projet contenant toutes les fonctionnalités et différentes couches logiciel, une seule base de code, une base de données pour toute l'application
{simplicité une seule code base un déploiement simple latence applicative} {tte logique dans une seule application, peu comptable avec un mode d'organisation agile, avoir toute l'app sur son poste, l'équipe ne maîtrise pas l'app, déploiement continu devient difficile}
Microservices : C'est une architecture qui a une suite de services indépendants. Focalisé sur une seule responsabilité, produit et non projet, management des données décentralisé, automatisation de l'infrastructure, design for failure, indépendant
Les microservices indépendants et ont chacun leurs containers. Arrêter un MS : pas d'impact sur les autres microservices
Scalabilité, liberté dans les choix des technos, déploiement ciblé, tests facilités, autonomie, équipe réduite
inconvénients : augmentation du trafic réseau, plus d'éléments à surveiller, coût de la latence augmente, complexité à mettre en place, organisation obligatoire
Microservices : Livraison, catalogue produits, achat

Microservices : Enregistrement des utilisateurs sur une BDD SQL / Export des utilisateurs sous le format CSV, la recherche
