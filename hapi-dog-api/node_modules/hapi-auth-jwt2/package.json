{
  "_args": [
    [
      "hapi-auth-jwt2@github:salzhrani/hapi-auth-jwt2#v-17",
      "/home/sarah/Developper/HapiVueMongo/hapi-dog-api"
    ]
  ],
  "_from": "salzhrani/hapi-auth-jwt2#v-17",
  "_id": "hapi-auth-jwt2@7.4.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/hapi-auth-jwt2",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/salzhrani/hapi-auth-jwt2/v-17/package.json",
      "gitUrl": "git://github.com/salzhrani/hapi-auth-jwt2.git#v-17",
      "httpsUrl": "git+https://github.com/salzhrani/hapi-auth-jwt2.git#v-17",
      "shortcut": "github:salzhrani/hapi-auth-jwt2#v-17",
      "ssh": "git@github.com:salzhrani/hapi-auth-jwt2.git#v-17",
      "sshUrl": "git+ssh://git@github.com/salzhrani/hapi-auth-jwt2.git#v-17",
      "type": "github"
    },
    "name": "hapi-auth-jwt2",
    "raw": "hapi-auth-jwt2@github:salzhrani/hapi-auth-jwt2#v-17",
    "rawSpec": "github:salzhrani/hapi-auth-jwt2#v-17",
    "scope": null,
    "spec": "github:salzhrani/hapi-auth-jwt2#v-17",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/salzhrani/hapi-auth-jwt2.git#2df67f310e8f88c0d4343ffcd3072ae972f164dc",
  "_shasum": "3f8388379e06382e9ab1aa694b13f937abc9667a",
  "_shrinkwrap": null,
  "_spec": "hapi-auth-jwt2@github:salzhrani/hapi-auth-jwt2#v-17",
  "_where": "/home/sarah/Developper/HapiVueMongo/hapi-dog-api",
  "author": {
    "email": "contact.nelsonic@gmail.com",
    "name": "@nelsonic",
    "url": "https://github.com/nelsonic"
  },
  "bugs": {
    "url": "https://github.com/dwyl/hapi-auth-jwt2/issues"
  },
  "contributors": [
    {
      "name": "Kevin Wu",
      "email": "@eventhough <kevindwusf@gmail.com"
    },
    {
      "name": "Alan Shaw",
      "email": "@alanshaw <alan@tableflip.io"
    },
    {
      "name": "Benjamin Lees",
      "email": "@benjaminlees <benji.man.lees@gmail.com"
    },
    {
      "name": "Jason Nah",
      "email": "@jyn <jason.@gmail.com"
    },
    {
      "name": "Steven Gangstead",
      "email": "@gangstead <steven@gangstead.com"
    }
  ],
  "dependencies": {
    "boom": "^7.1.1",
    "cookie": "^0.3.1",
    "jsonwebtoken": "^8.1.0"
  },
  "description": "Hapi.js Authentication Plugin/Scheme using JSON Web Tokens (JWT)",
  "devDependencies": {
    "aguid": "^2.0.0",
    "goodparts": "^1.2.1",
    "hapi": "^17.0.1",
    "istanbul": "^0.4.5",
    "jshint": "^2.9.4",
    "nyc": "^11.3.0",
    "pre-commit": "^1.2.2",
    "tap-nyc": "^1.0.3",
    "tap-spec": "^4.1.1",
    "tape": "^4.8.0"
  },
  "engines": {
    "node": ">=8.9.0"
  },
  "gitHead": "2df67f310e8f88c0d4343ffcd3072ae972f164dc",
  "homepage": "https://github.com/dwyl/hapi-auth-jwt2",
  "keywords": [
    "Auth",
    "Authentication",
    "Hapi.js",
    "JSON Web Tokens",
    "JWT"
  ],
  "license": "ISC",
  "main": "lib/index.js",
  "name": "hapi-auth-jwt2",
  "nyc": {
    "all": true,
    "branches": 100,
    "cache": false,
    "check-coverage": true,
    "exclude": [
      "test/**/*.spec.js"
    ],
    "functions": 100,
    "include": [
      "lib/**/*.js"
    ],
    "lines": 100,
    "report-dir": "./coverage",
    "reporter": [
      "lcov",
      "text-summary"
    ],
    "statements": 100
  },
  "optionalDependencies": {},
  "pre-commit": [
    "coverage",
    "jshint"
  ],
  "readme": "# Hapi Auth using JSON Web Tokens (JWT)\n\n***The*** authentication scheme/plugin for\n[**Hapi.js**](http://hapijs.com/) apps using **JSON Web Tokens**\n\n![hapi-auth-jwt2-diagram-verify](https://cloud.githubusercontent.com/assets/194400/11937081/00f9b4bc-a80a-11e5-9f71-a7e05e92f1ae.png)\n\n[![NSP Status](https://nodesecurity.io/orgs/dwyl/projects/1047e39b-0d4a-45ff-af65-c04afc41fc20/badge)](https://nodesecurity.io/orgs/dwyl/projects/1047e39b-0d4a-45ff-af65-c04afc41fc20)\n[![Build Status](https://travis-ci.org/dwyl/hapi-auth-jwt2.svg \"Build Status = Tests Passing\")](https://travis-ci.org/dwyl/hapi-auth-jwt2)\n[![codecov.io Code Coverage](https://img.shields.io/codecov/c/github/dwyl/hapi-auth-jwt2.svg?maxAge=2592000)](https://codecov.io/github/dwyl/hapi-auth-jwt2?branch=master)\n[![JavaScript Style Guide: Good Parts](https://img.shields.io/badge/code%20style-goodparts-brightgreen.svg?style=flat)](https://github.com/dwyl/goodparts \"JavaScript The Good Parts\")\n[![Inline docs](http://inch-ci.org/github/dwyl/hapi-auth-jwt2.svg?branch=master)](http://inch-ci.org/github/dwyl/hapi-auth-jwt2)\n[![Code Climate](https://codeclimate.com/github/dwyl/hapi-auth-jwt2/badges/gpa.svg \"No Nasty Code\")](https://codeclimate.com/github/dwyl/hapi-auth-jwt2)\n[![HAPI 16.0.1](http://img.shields.io/badge/hapi-16.0.1-brightgreen.svg \"Latest Hapi.js\")](http://hapijs.com)\n[![Node.js Version](https://img.shields.io/node/v/hapi-auth-jwt2.svg?style=flat \"Node.js 10 & 12 and io.js latest both supported\")](http://nodejs.org/download/)\n[![Dependency Status](https://david-dm.org/dwyl/hapi-auth-jwt2.svg \"Dependencies Checked & Updated Regularly (Security is Important!)\")](https://david-dm.org/dwyl/hapi-auth-jwt2)\n[![devDependencies Status](https://david-dm.org/dwyl/hapi-auth-jwt2/dev-status.svg)](https://david-dm.org/dwyl/hapi-auth-jwt2?type=dev)\n[![npm package version](https://img.shields.io/npm/v/hapi-auth-jwt2.svg)](https://www.npmjs.com/package/hapi-auth-jwt2)\n\nThis node.js module (Hapi plugin) lets you use JSON Web Tokens (JWTs)\nfor authentication in your [Hapi.js](http://hapijs.com/)\nweb application.\n\nIf you are totally new to JWTs, we wrote an introductory post explaining\nthe concepts & benefits: https://github.com/dwyl/learn-json-web-tokens\n\nIf you (or anyone on your team) are unfamiliar with **Hapi.js** we have a\nquick guide for that too: https://github.com/dwyl/learn-hapi\n\n## Usage\n\nWe tried to make this plugin as user (developer) friendly as possible,\nbut if anything is unclear, please submit any questions as issues on GitHub:\nhttps://github.com/dwyl/hapi-auth-jwt2/issues\n\n### Install from NPM\n\n```sh\nnpm install hapi-auth-jwt2 --save\n```\n\n### Example\n\nThis basic usage example should help you get started:\n\n\n```javascript\nconst Hapi = require('hapi');\n\nconst people = { // our \"users database\"\n    1: {\n      id: 1,\n      name: 'Jen Jones'\n    }\n};\n\n// bring your own validation function\nconst validate = async function (decoded, request) {\n\n    // do your checks to see if the person is valid\n    if (!people[decoded.id]) {\n      return { isValid: false };\n    }\n    else {\n      return { isValid: true };\n    }\n};\n\nconst init = async () => {\n  const server = new Hapi.Server({ port: 8000 });\n  // include our module here ↓↓\n  await server.register(require('hapi-auth-jwt2'));\n\n  server.auth.strategy('jwt', 'jwt',\n  { key: 'NeverShareYourSecret',          // Never Share your secret key\n    validate: validate,            // validate function defined above\n    verifyOptions: { algorithms: [ 'HS256' ] } // pick a strong algorithm\n  });\n\n  server.auth.default('jwt');\n\n  server.route([\n    {\n      method: \"GET\", path: \"/\", config: { auth: false },\n      handler: function(request, reply) {\n        reply({text: 'Token not required'});\n      }\n    },\n    {\n      method: 'GET', path: '/restricted', config: { auth: 'jwt' },\n      handler: function(request, reply) {\n        reply({text: 'You used a Token!'})\n        .header(\"Authorization\", request.headers.authorization);\n      }\n    }\n  ]);\n  await server.start();\n  return server;\n};\n\n\ninit().then(server => {\n  console.log('Server running at:', server.info.uri);\n})\n.catch(error => {\n  console.log(error);\n});\n```\n\n## *Quick Demo*\n\nOpen your terminal and clone this repo:\n\n```sh\ngit clone https://github.com/dwyl/hapi-auth-jwt2.git && cd hapi-auth-jwt2\n```\n\nRun the server with:\n\n```sh\nnpm install && node example/server.js\n```\n\nNow (*in a different terminal window*) use `cURL` to access the two routes:\n\n#### No Token Required\n\n```sh\ncurl -v http://localhost:8000/\n```\n\n\n\n#### Token Required\n\nTry to access the /*restricted* content *without* supplying a Token\n(*expect* to see a ***401 error***):\n```sh\ncurl -v http://localhost:8000/restricted\n```\nor visit: http://localhost:8000/restricted in your web browser.\n(*both requests will be blocked and return a `401 Unauthorized` error*)\n\n\nNow access the url using the following format:\n`curl -H \"Authorization: <TOKEN>\" http://localhost:8000/restricted`\n\nA here's a *valid* token you can use (*copy-paste* this command):\n```sh\ncurl -v -H \"Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwibmFtZSI6IkFudGhvbnkgVmFsaWQgVXNlciIsImlhdCI6MTQyNTQ3MzUzNX0.KA68l60mjiC8EXaC2odnjFwdIDxE__iDu5RwLdN1F2A\" \\\nhttp://localhost:8000/restricted\n```\n\nor visit this url in your browser (*passing the token in url*):\n\n<small> http://localhost:8000/restricted?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwibmFtZSI6IkFudGhvbnkgVmFsaWQgVXNlciIsImlhdCI6MTQyNTQ3MzUzNX0.KA68l60mjiC8EXaC2odnjFwdIDxE__iDu5RwLdN1F2A </small>\n\nThat's it.\n\nNow write your own `validate` with what ever checks you want to perform\non the **decoded** token before allowing the visitor to proceed.\n\n## Documentation\n\n- `key` - (***required*** - *unless you have a `customVerify` function*) the secret key (or array of potential keys)\nused to check the signature of the token ***or*** a **key lookup function** with\nsignature `async function(decoded)` where:\n    - `decoded` - the ***decoded*** but ***unverified*** JWT received from client\n    - Returns an object `{ isValid, key, extraInfo }` where:\n        - `isValid` - result of validation\n        - `key` - the secret key (or array of keys to try)\n        - `extraInfo` - (***optional***) any additional information that you would like to use in\n        `validate` which can be accessed via `request.plugins['hapi-auth-jwt2'].extraInfo`\n- `validate` - (***required***) the function which is run once the Token has been decoded with\n signature `async function(decoded, request, h)` where:\n    - `decoded` - (***required***) is the decoded and verified JWT received in the request\n    - `request` - (***required***) is the original ***request*** received from the client\n    - `h` - (***required***) the response toolkit.\n    - Returns an object `{ isValid, credentials, response }` where:\n        - `isValid` - `true` if the JWT was valid, otherwise `false`.\n        - `credentials` - (***optional***) alternative credentials to be set instead of `decoded`.\n        - `response` - (***optional***) If provided will be used immediately as a takeover response.\n\n### *Optional* Parameters\n\n- `verifyOptions` - (***optional*** *defaults to none*) settings to define how tokens are verified by the\n[jsonwebtoken](https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback) library\n    - `ignoreExpiration` - ignore expired tokens\n    - `audience` - do not enforce token [*audience*](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#audDef)\n    - `issuer` - do not require the issuer to be valid\n    - `algorithms` - list of allowed algorithms\n- `responseFunc` - (***optional***) function called to decorate the response with authentication headers before the response headers or payload is written where:\n    - `request` - the request object.\n    - `reply(err, response)`- is called if an error occurred\n- `errorFunc` - (***optional*** *defaults to raising the error requested*) function called when an error has been raised. It provides an extension point to allow the host the ability to customise the error messages returned. Passed in object follows the following schema:\n    - `errorContext.errorType` - ***required*** the `Boom` method to call (eg. unauthorized)\n    - `errorContext.message` - ***required*** the `message` passed into the `Boom` method call\n    - `errorContext.schema` - the `schema` passed into the `Boom` method call\n    - `errorContext.attributes` - the `attributes` passed into the `Boom` method call\n    - The function is expected to return the modified `errorContext` with all above fields defined.\n- `urlKey` - (***optional***  *defaults to* `'token'`) - if you prefer to pass your token via url, simply add a `token` url parameter to your request or use a custom parameter by setting `urlKey`. To disable the url parameter set urlKey to `false` or ''.\n- `cookieKey` - (***optional*** *defaults to* `'token'`) - if you prefer to set your own cookie key or your project has a cookie called `'token'` for another purpose, you can set a custom key for your cookie by setting `options.cookieKey='yourkeyhere'`. To disable cookies set cookieKey to `false` or ''.\n- `headerKey` - (***optional***  *defaults to* `'authorization'`) - The lowercase name of an HTTP header to read the token from. To disable reading the token from a header, set this to `false` or ''.\n- `tokenType` - (***optional*** *defaults to none*) - allow custom token type, e.g. `Authorization: <tokenType> 12345678`.\n- `complete` - (***optional*** *defaults to* `false`) - set to `true` to receive the complete token (`decoded.header`, `decoded.payload` and `decoded.signature`) as `decoded` argument to key lookup and `verify` callbacks (*not `validate`*)\n- `headless` - (***optional*** *defaults to none*) - set to an `object` containing the header part of the JWT token that should be added to a headless JWT token received. Token's with headers can still be used with this option activated. e.g `{ alg: 'HS256', typ: 'JWT' }`\n\n### Useful Features\n\n+ The *encoded* JWT (token) is extracted from the request and\nmade available on the `request` object as `request.auth.token`,\nin case you need it later on in the request lifecycle.\nThis feature was requested by @mcortesi in\n[hapi-auth-jwt2/issues/123](https://github.com/dwyl/hapi-auth-jwt2/issues/123)\n\n\n### Understanding the Request Flow\n\nAt the simplest level this is the request flow through a Hapi App\nusing `hapi-auth-jwt2`:\n\n![hapi auth request flow](https://cloud.githubusercontent.com/assets/443149/11938155/a5fa9554-a7cd-11e5-92b1-01efd6841ded.png)\n\n### verifyOptions let you define how to Verify the Tokens (*Optional*)\n\nexample:\n```js\nserver.auth.strategy('jwt', 'jwt', true,\n{ key: 'NeverShareYourSecret', // Never Share your secret key\n  validate: validate,      // validate function defined above\n  verifyOptions: {\n    ignoreExpiration: true,    // do not reject expired tokens\n    algorithms: [ 'HS256' ]    // specify your secure algorithm\n  }\n});\n```\n\nRead more about this at: [jsonwebtoken verify options]( https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback)\n\n### Specify Signing Algorithm (_Optional but highly recommended_)\n\nFor [security reasons](https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/) it is recommended that you specify the allowed algorithms used when signing the tokens:\n```js\nserver.auth.strategy('jwt', 'jwt', true,\n{ key: 'YourSuperLongKeyHere', // Never Share your secret key\n  validate: validate,      // validate function defined above\n  verifyOptions: { algorithms: [ 'HS256' ] }  // only allow HS256 algorithm\n});\n```\n\nIf you prefer *not* to use any of these verifyOptions simply\ndo not set them when registering the plugin with your app;\nthey are all optional.\n\nThis feature was requested in: [issues/29](https://github.com/dwyl/hapi-auth-jwt2/issues/29)\n\n### Using Base64 encoded secret keys\n\nSome authentication services (like Auth0) provide secret keys encoded in base64, To find out if your authentication service is one of these services, please try and experiment with the base64 encoded secret options on the validator at http://jwt.io/\n\nIf your key is base64 encoded, then for JWT2 to use it you need to convert it to a buffer.  Following is an example of how to do this.\n\n```js\nserver.auth.strategy('jwt', 'jwt', true,\n{ key: Buffer('<Your Base64 encoded secret key>', 'base64'), // Never Share your secret key\n  validate: validate,      // validate function defined above\n  verifyOptions: { algorithms: [ 'HS256' ] }  // only allow HS256 algorithm\n});\n```\n\n### Authentication Modes\n\nThis plugin supports [authentication modes](http://hapijs.com/api#route-options) on routes.\n\n- `required` - requires JWT to be sent with every request\n\n- `optional` - if no JWT is provided, request will pass with `request.auth.isAuthenticated` set to `false` and `request.auth.credentials` set to null\n\n- `try` - similar to `optional`, but invalid JWT will pass with `request.auth.isAuthenticated` set to false and failed credentials provided in `request.auth.credentials`\n\n### Additional notes on keys and key lookup functions\n\n- This option to look up a secret key was added to support \"multi-tenant\" environments. One use case would be companies that white label API services for their customers and cannot use a shared secret key. If the key lookup function needs to use fields from the token header (e.g. [x5t header](http://self-issued.info/docs/draft-jones-json-web-token-01.html#ReservedHeaderParameterName), set option `completeToken` to `true`.\n\n- The reason why you might want to pass back `extraInfo` in the callback is because you likely need to do a database call to get the key which also probably returns useful user data. This could save you another call in `validate`.\n\n- The key or value returned by the key lookup function can also be an array of keys to try.  Keys will be tried until one of them successfully verifies the signature. The request will only be unauthorized if ALL of the keys fail to verify. This is useful if you want to support multiple valid keys (like continuing to accept a deprecated key while a client switches to a new key).\n\n```js\nserver.auth.strategy('jwt', 'jwt', true,\n{ key: [ 'PrimareSecretKey', 'DeprecatedKeyStillAcceptableForNow' ],\n  validate: validate,\n  verifyOptions: { algorithms: [ 'HS256' ] }\n});\n```\n\n## URL (URI) Token\n\nSeveral people requested the ability pass in JSNOWebTokens in the requested URL:\n[dwyl/hapi-auth-jwt2/issues/**19**](https://github.com/dwyl/hapi-auth-jwt2/issues/19)\n\n### Usage\n\nSetup your hapi.js server as described above (_no special setup for using JWT tokens in urls_)\n\n```sh\nhttps://yoursite.co/path?token=your.jsonwebtoken.here\n```\nYou will need to generate/supply a valid tokens for this to work.\n\n```js\nconst JWT   = require('jsonwebtoken');\nconst obj   = { id:123,\"name\":\"Charlie\" }; // object/info you want to sign\nconst token = JWT.sign(obj, secret);\nconst url   = \"/path?token=\"+token;\n```\n\n> What if I want to *disable* the ability to pass JWTs in via the URL?\n> Set your `urlKey` to `false` or ''. (*added by* @bitcloud: [issue #146](https://github.com/dwyl/hapi-auth-jwt2/pull/146))\n\n## Generating Your Secret Key\n\n@skota asked \"***How to generate secret key***?\" in: [dwyl/hapi-auth-jwt2/issues/**48**](https://github.com/dwyl/hapi-auth-jwt2/issues/48)\n\nThere are _several_ options for generating secret keys.\nThe _easiest_ way is to run node's crypto hash in your terminal:\n```js\nnode -e \"console.log(require('crypto').randomBytes(256).toString('base64'));\"\n```\nand copy the resulting base64 key and use it as your JWT secret.\nIf you are *curious* how strong that key is watch: https://youtu.be/koJQQWHI-ZA\n\n\n## Want to access the JWT token *after* validation?\n\n[@mcortesi](https://github.com/mcortesi) requested the ability to\naccess the (*raw*) JWT token used for authentication.\n[dwyl/hapi-auth-jwt2/issues/**123**](https://github.com/dwyl/hapi-auth-jwt2/issues/123)\n\nYou can access the extracted JWT token in your handler or any other function\nwithin the request lifecycle with the `request.auth.token` property.\n\n*Note* that this is the ***encoded token***,\nand it's only useful if you want to use to make\nrequest to other servers using the user's token.\n\nThe *decoded* version of the token, accessible via `request.auth.credentials`\n\n## Want to send/store your JWT in a Cookie?\n\n[@benjaminlees](https://github.com/benjaminlees)\nrequested the ability to send/receive tokens as cookies:\n[dwyl/hapi-auth-jwt2/issues/**55**](https://github.com/dwyl/hapi-auth-jwt2/issues/55)\nSo we added the ability to *optionally* send/store your tokens in cookies\nto simplify building your *web app*.\n\nTo enable cookie support in your application all you need to do is add\na few lines to your code:\n\n### Cookie Options\n\nFirstly set the options you want to apply to your cookie:\n\n```js\nconst cookie_options = {\n  ttl: 365 * 24 * 60 * 60 * 1000, // expires a year from today\n  encoding: 'none',    // we already used JWT to encode\n  isSecure: true,      // warm & fuzzy feelings\n  isHttpOnly: true,    // prevent client alteration\n  clearInvalid: false, // remove invalid cookies\n  strictHeader: true   // don't allow violations of RFC 6265\n}\n```\n\n### Set the Cookie on your `reply`\n\nThen, in your authorisation handler\n\n```js\nreply({text: 'You have been authenticated!'})\n.header(\"Authorization\", token)        // where token is the JWT\n.state(\"token\", token, cookie_options) // set the cookie with options\n```\n\nFor a *detailed* example please see:\nhttps://github.com/nelsonic/hapi-auth-jwt2-cookie-example\n\n#### Background Reading (*Cookies*)\n\n+ Wikipedia has a good intro (general): https://en.wikipedia.org/wiki/HTTP_cookie\n+ Cookies Explained (by Nicholas C. Zakas - JavaScript über-master) http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/\n+ The Unofficial Cookie FAQ: http://www.cookiecentral.com/faq/\n+  HTTP State Management Mechanism (long but complete spec):\nhttp://tools.ietf.org/html/rfc6265\n\n- - -\n\n## Frequently Asked Questions (FAQ) [![Join the chat at https://gitter.im/dwyl/chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dwyl/chat/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n### Do I *need* to include `jsonwebtoken` in my project?\n\n**Q**: Must I include the **jsonwebtoken** package in my project\n[given that **hapi-auth-jwt2** plugin already includes it] ? asked in [hapi-auth-jwt2/issues/32](https://github.com/dwyl/hapi-auth-jwt2/issues/32)  \n**A**: Yes, you need to *manually* install the **jsonwebtoken**\nnode module from NPM with `npm install jsonwebtoken --save` if you want to ***sign*** JWTs in your app.\nEven though **hapi-auth-jwt2** includes it\nas a **dependency** your app does not know where to find it in the **node_modules** tree for your project.\nUnless you include it via ***relative path*** e.g:\n`const JWT = require('./node_modules/hapi-auth-jwt2/node_modules/jsonwebtoken');`\nwe *recommend* including it in your **package.json** ***explicitly*** as a **dependency** for your project.\n\n### ***Custom Verification*** ?\n\nCan we supply a ***Custom Verification*** function instead of using the **JWT.verify** method?  \nasked by *both* [Marcus Stong](https://github.com/stongo) & [Kevin Stewart](https://github.com/kdstew)\nin [issue #120](https://github.com/dwyl/hapi-auth-jwt2/issues/120) and [issue #130](https://github.com/dwyl/hapi-auth-jwt2/issues/130) respectively.\n**Q**: Does this module support custom verification function or disabling verification?\n**A**: Yes, it *does now*! (*see: \"Advanced Usage\" below*) the inclusion of a `verify`\ngives you *complete control* over the verification of the incoming JWT.\n\n<br />\n\n### Can I use `hapi-auth-jwt2` with [`glue`](https://github.com/hapijs/glue)\n\nSeveral people asked us if this plugin is compatible with\nHapi's \"Server Composer\" [`glue`](https://github.com/hapijs/glue)\n\nThe answer is ***Yes***! For an example of how to do this,\nsee [@avanslaars](https://github.com/avanslaars) code example:\nhttps://github.com/dwyl/hapi-auth-jwt2/issues/151#issuecomment-218321212\n\n<br />\n\n### How do I *invalidate* an *existing token*?\n\nAsked by [@SanderElias](https://github.com/SanderElias) in [hapi-auth-jwt2/issues/126](https://github.com/dwyl/hapi-auth-jwt2/issues/126)\n\nWe store our JWT-based sessions in a Redis datastore and lookup the session (`jti`) for the given JWT during the `validate` (*validation function*) see: https://github.com/dwyl/hapi-auth-jwt2-example/blob/791b0d3906d4deb256daf23fcf8f5021905abe9e/index.js#L25\nThis means we can invalidate the session in Redis and then reject a request that uses an \"old\" or invalid JWT. see: https://github.com/dwyl/hapi-auth-jwt2-example/blob/791b0d3906d4deb256daf23fcf8f5021905abe9e/index.js#L25\n\n\n<br />\n\n### How do I set JWT Auth to *All Routes*?\n\n[@abeninskibede](https://github.com/abeninskibede) asked how to set all routes to use JWT Auth in [hapi-auth-jwt2/issues/149](https://github.com/dwyl/hapi-auth-jwt2/issues/149)\n\nWe tend to enable `hapi-auth-jwt2` for _all_ routes by setting the `mode` parameter to `true` (so its `required` for all endpoints) because _most_ of the endpoints in our app require the person/user to be authenticated e.g:\n\n```js\n// setting the 3rd argument to true means 'mode' is 'required' see: http://hapijs.com/tutorials/auth#mode\nserver.auth.strategy('jwt', 'jwt', true, { // so JWT auth is required for all routes\n  key: process.env.JWT_SECRET,\n  validate: require('./jwt2_validate_func'),\n  verifyOptions: { ignoreExpiration: true, algorithms: [ 'HS256' ] }\n});\n```\n> _Detailed Practical Example_: https://github.com/dwyl/hapi-login-example-postgres/blob/245a44f0e88226d99a3ad2e3dc38cc0d1750a241/lib/server.js#L33\n\nWhen you want a particular route to ***not require*** JWT auth you simply set `config: { auth: false }` e.g:\n```js\n  server.route({\n    method: 'GET',\n    path: '/login',\n    handler: login_handler,  // display login/registration form/page\n    config: { auth: false } // don't require people to be logged in to see the login page! (duh!)\n  });\n```\n\nThe best place to _understand_ everything about Hapi Auth is in the docs: http://hapijs.com/tutorials/auth#setting-a-default-strategy\nBut if you have any questions which are not answered there, feel free to [ask!](https://github.com/dwyl/hapi-auth-jwt2/issues)\n\n<br />\n\n### How to _redirect_ if a token has expired?\n\n@traducer & @goncalvesr2 both requested how to redirect after failed Auth in\n[hapi-auth-jwt2/issues/161](https://github.com/dwyl/hapi-auth-jwt2/issues/161)\nand [hapi-auth-jwt2/issues/148](https://github.com/dwyl/hapi-auth-jwt2/issues/148) respectively\n\nThe [`hapi-error`](https://github.com/dwyl/hapi-error) lets\nyou _easily_ redirect to any url you define if the Auth check fails\n(i.e. `statusCode 401`)\nsee: https://github.com/dwyl/hapi-error#redirecting-to-another-endpoint\n(*code examples there.*)\n\n<br />\n\n### How do I change my token and re-state it without becoming unauthenticated? ###\n\nFor example:\n\nIf the request.auth.credentials object initially added to your `/` endpoint initial  was:\n\n``` js\n{\n  userId: 1,\n  permission: 'ADMIN'\n}\n```\n\nAnd you want to change the user's permission to `SUPER_ADMIN`.\n\nRetrieve the initial session object added as a token to `/`  \n```js\nconst session  = request.auth.credentials;\n```\nChange the object\n```js\nsession.permission = 'SUPER_ADMIN';\n```\nSign as a JWT token again\n```js\nconst token = JWT.sign(session, process.env.JWT_SECRET);\n```\nReply as usual whilst re-adding the token to your original endpoint `/`\n```js\nreply().state('token', token, { path: '/' }).redirect('/wherever');\n```\n\n## *Advanced/Alternative* Usage => Bring Your Own `verify`\n\nWhile *most* people using `hapi-auth-jwt2` will opt for the *simpler* use case\n(*using a* ***Validation Function*** *`validate` - see: Basic Usage example above -\n  which validates the JWT payload after it has been verified...*)\nothers may need more control over the `verify` step.\n\nThe [*internals*](https://github.com/dwyl/hapi-auth-jwt2/blob/eb9fff9fc384fde07ec2a1d2f0da520be902da2c/l˜/index.js#L58)\nof `hapi-auth-jwt2` use the `jsonwebtoken.verify` method to ***verify*** if the\nJTW was signed using the `JWT_SECRET` (*secret key*).\n\nIf you prefer specifying your own verification logic instead of having a `validate`, simply define a `verify` instead when initializing the plugin.\n\n- `verify` - (***optional***) the function which is run once the Token has been decoded\n(*instead of a `validate`*) with signature `async function(decoded, request)` where:\n    - `decoded` - (***required***) is the decoded but ***unverified*** JWT received in the request.\n    - `request` - (***required***) is the original ***request*** received from the client\n    - Returns an object `{ isValid, credentials }` where:\n        - `isValid` - `true` if the JWT was valid, otherwise `false`.\n        - `credentials` - (***optional***) alternative credentials to be set instead of `decoded`.\n\nThe advantage of this approach is that it allows people to write a\ncustom verification function or to bypass the `JWT.verify` *completely*.\nFor more detail, see: use-case discussion in https://github.com/dwyl/hapi-auth-jwt2/issues/120\n\n\n> ***Note***: *nobody has requested the ability to use* ***both*** *a*\n`validate` ***and*** `verify`.\nThis should not be *necessary*\nbecause with a `verify` you can incorporate your own custom-logic.\n\n<br />\n\n### Compatibility\n\n`hapi-auth-jwt2` version `8.x.x` is compatible with Hapi.js version `17.x.x`, while `7.x.x` is compatible with `16.x.x`\n`15.x.x` `14.x.x` `13.x.x` `12.x.x` `11.x.x` `10.x.x` `9.x.x` and `8.x.x`\nhapi `17.x.x` is a major rewrite that's why it is version `8.x.x` of the plugin is not backward compatible!\n\nHowever in the interest of\n security/performance we *recommend* using the [*latest version*](https://github.com/hapijs/hapi/) of Hapi.\n\n> *If you have a question, or need help getting started* ***please post an issue/question on\nGitHub***: https://github.com/dwyl/hapi-auth-jwt2/issues *or*\n[![Join the chat at https://gitter.im/dwyl/chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dwyl/chat/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<br />\n<br />\n\n\n### Production-ready Examples?\n\n#### Using PostgreSQL?\n\nSee: https://github.com/dwyl/hapi-login-example-postgres\n\n#### Using Redis\n\nRedis is *perfect* for storing session data that needs to be checked\non every authenticated request.\n\nIf you are unfamiliar with Redis or anyone on your team needs a refresher,\nplease checkout: https://github.com/dwyl/learn-redis\n\nThe ***code*** is at: https://github.com/dwyl/hapi-auth-jwt2-example\nand with tests. please ask additional questions if unclear!\n\nHaving a more real-world example was *seconded* by [@manonthemat](https://github.com/manonthemat) see:\n[hapi-auth-jwt2/issues/9](https://github.com/dwyl/hapi-auth-jwt2/issues/9)\n\n### Real World Example ?\n\nIf you would like to see a \"***real world example***\" of this plugin in use\nin a ***production*** web app (API)\nplease see: https://github.com/dwyl/time/tree/master/api/lib\n\n+ **app.js** ***registering*** the **hapi-auth-jwt2 plugin**:\n[app.js#L13](https://github.com/dwyl/time/blob/0a5ec8711840528a4960c388825fb883fabddd76/app.js#L13)\n+ telling app.js where to find our **validate** Function:\n[app.js#L21](https://github.com/dwyl/time/blob/0a5ec8711840528a4960c388825fb883fabddd76/app.js#L21)\n+ **validate** Function (how we check the JWT is still valid):\n[api/lib/auth_jwt_validate.js](https://github.com/dwyl/time/blob/0a5ec8711840528a4960c388825fb883fabddd76/api/lib/auth_jwt_validate.js) looks up the person's session in our ElasticSearch Database\nif the [session record is ***found*** (valid) and ***not ended***](https://github.com/dwyl/time/blob/0a5ec8711840528a4960c388825fb883fabddd76/api/lib/auth_jwt_validate.js#L12) we allow the person to see the restricted content.\n+ **Signing your JWTs**: in your app you need a method to *sign* the JWTs (and put them in a database\n  if that's how you are *verifying* your sessions) ours is:\n  [api/lib/auth_jwt_sign.js](https://github.com/dwyl/time/blob/0a5ec8711840528a4960c388825fb883fabddd76/api/lib/auth_jwt_sign.js#L18)\n\nIf you have ***any questions*** on this please post an issue/question on GitHub:\nhttps://github.com/dwyl/hapi-auth-jwt2/issues\n(*we are here to help get you started on your journey to **hapi**ness!*)\n\n<br />\n\n- - -\n\n## Contributing [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwyl/hapi-auth-jwt2/issues)\n\nIf you spot an area for improvement, please raise an issue: https://github.com/dwyl/hapi-auth-jwt2/issues\n*Someone* in the dwyl team is *always* online so we will usually answer within a few hours.\n\n### Running the tests requires environment variables\n\nThe \"*real world example*\" expects to have two environment variables:\n**JWT_SECRET** and **REDISCLOUD_URL**.\n\n> ***Ask*** [@**nelsonic**](https://github.com/nelsonic) for a *valid* **Redis Cloud url** (...*we cannot publish the* ***real*** *one on GitHub...*)\n\n```sh\nexport JWT_SECRET='ItsNoSecretBecauseYouToldEverybody'\nexport REDISCLOUD_URL='redis://rediscloud:OhEJjWvSgna@pub-redis-1046.eu-west-1-2.1.ec2.garantiadata.com:10689'\n```\n\n\n# tl;dr\n\n## Motivation\n\nWhile making [***Time***](https://github.com/dwyl/time) we want to ensure\nour app (and API) is as ***simple*** as *possible* to use.\nThis lead us to using JSON Web Tokens for ***Stateless*** Authentication.\n\nWe did a *extensive* [research](https://www.npmjs.com/search?q=hapi+auth+jwt)\ninto *existing* modules that *might* solve our problem; there are *many* on NPM:\n![npm search for hapi+jwt](http://i.imgur.com/xIj3Xpa.png)\n\nbut they were invariably ***too complicated***, poorly documented and\nhad *useless* (non-real-world) \"examples\"!\n\nAlso, none of the *existing* modules exposed the **request** object\nto the **validate** which we thought might be handy.\n\nSo we decided to write our own module addressing all these issues.\n\n*Don't take our word for it, do your own homework and decide which module you prefer.*\n\n\n## Why hapi-auth-jwt2 ?\n\nThe name we wanted was taken.\nThink of our module as the \"***new, simplified and actively maintained version***\"\n\n## Useful Links\n\n+ For more background on jsonwebtokens (JWTs) see our detailed overview:\nhttps://github.com/dwyl/learn-json-web-tokens\n+ Securing Hapi Client Side Sessions:\nhttps://blog.liftsecurity.io/2014/11/26/securing-hapi-client-side-sessions\n\n### Hapi.js Auth\n\nWe borrowed code from the following:\n\n+ http://hapijs.com/tutorials/auth\n+ https://github.com/hapijs/hapi-auth-basic\n+ https://github.com/hapijs/hapi-auth-cookie\n+ https://github.com/hapijs/hapi-auth-hawk\n+ https://github.com/ryanfitz/hapi-auth-jwt\n(Ryan made a good *start* - however, when we tried to submit a [pull request](https://github.com/ryanfitz/hapi-auth-jwt/pull/27)\nto improve (_security_) it was *ignored* for _weeks_ ... an *authentication* plugin that [***ignores security updates***](https://github.com/ryanfitz/hapi-auth-jwt/issues/26) in [dependencies](https://david-dm.org/ryanfitz/hapi-auth-jwt)\n  is a ***no-go*** for us; **security** ***matters***!) If you spot _any_\n  issue in ***hapi-auth-jwt2*** please create an issue: https://github.com/dwyl/hapi-auth-jwt2/issues\n  so we can get it _resolved_ ASAP!\n\n_Aparently, `.some` people like it..._:\n\n[![https://nodei.co/npm/hapi-auth-jwt2.png?downloads=true&downloadRank=true&stars=true](https://nodei.co/npm/hapi-auth-jwt2.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/hapi-auth-jwt2)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dwyl/hapi-auth-jwt2.git"
  },
  "scripts": {
    "coverage": "nyc tape ./test/*.test.js && nyc",
    "jshint": "./node_modules/jshint/bin/jshint -c .jshintrc --exclude-path .gitignore .",
    "lint": "goodparts lib",
    "quick": "./node_modules/tape/bin/tape ./test/*.test.js | tap-nyc",
    "report": "open coverage/lcov-report/index.html",
    "start": "node example/server.js",
    "test": "nyc tape ./test/*.test.js | tap-nyc"
  },
  "version": "7.4.1"
}
